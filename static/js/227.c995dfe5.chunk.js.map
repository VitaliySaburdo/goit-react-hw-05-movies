{"version":3,"file":"static/js/227.c995dfe5.chunk.js","mappings":"mTAEMA,EAAW,gCACXC,EAAU,mCAGHC,EAAkB,mCAAG,WAAMC,GAAN,gFAC1BC,EAD0B,UACjBJ,EADiB,uCACsBC,EADtB,iBACsCE,GADtC,SAETE,EAAAA,EAAAA,IAAUD,GAFD,cAE1BE,EAF0B,yBAGzBA,EAASC,MAHgB,2CAAH,sDAOlBC,EAAc,mCAAG,WAAMC,GAAN,gFACtBL,EADsB,UACbJ,EADa,iBACIS,EADJ,oBACkBR,EADlB,4BAELI,EAAAA,EAAAA,IAAUD,GAFL,cAEtBE,EAFsB,yBAGrBA,EAASC,MAHY,2CAAH,sDAOdG,EAAW,mCAAG,WAAMD,GAAN,gFACnBL,EADmB,UACVJ,EADU,iBACOS,EADP,4BAC6BR,EAD7B,4BAEFI,EAAAA,EAAAA,IAAUD,GAFR,cAEnBE,EAFmB,yBAGlBA,EAASC,MAHS,2CAAH,sDAOXI,EAAc,mCAAG,WAAMF,GAAN,gFACtBL,EADsB,UACbJ,EADa,iBACIS,EADJ,4BAC0BR,EAD1B,4BAELI,EAAAA,EAAAA,IAAUD,GAFL,cAEtBE,EAFsB,yBAGrBA,EAASC,MAHY,2CAAH,sDAOdK,EAAa,mCAAG,WAAOC,EAAOV,GAAd,gFACrBC,EADqB,UACZJ,EADY,gCACoBC,EADpB,kBACqCY,EADrC,iBACmDV,EADnD,4BAEJE,EAAAA,EAAAA,IAAUD,GAFN,cAErBE,EAFqB,yBAGpBA,EAASC,MAHW,2CAAH,uD,+KChCbO,EAAYC,EAAAA,GAAAA,IAAH,+DAKTC,EAAMD,EAAAA,GAAAA,IAAH,+CAIHE,EAAMF,EAAAA,GAAAA,GAAH,qG,mBCNHG,EAAY,SAAC,GAAsB,IAAD,IAAnBC,EAAmB,EAAnBA,aAClBC,EACND,EADMC,YAAaC,EACnBF,EADmBE,SAAUC,EAC7BH,EAD6BG,MAAOC,EACpCJ,EADoCI,aAAcC,EAClDL,EADkDK,aAAcC,EAChEN,EADgEM,OAG5DC,EAAOH,EAAaI,MAAM,EAAG,GAC7BC,EAAsC,GAA1BJ,EAAaK,QAAQ,GACjCC,EAAaL,EAAOM,KAAI,SAAAC,GAAK,OAAIA,EAAMC,KAAO,IAAjB,IAE7BC,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAE7C,OACE,6BACE,SAAC,KAAD,CAAMC,GAAIJ,EAAV,sBACA,UAACpB,EAAD,YACE,SAACE,EAAD,CACEuB,IAAG,yCAAoCnB,GACvCoB,IAAI,GACJC,MAAO,OAET,4BACE,0BACGnB,EADH,KACYI,EADZ,QAGA,kDAAmBE,EAAnB,SACA,sCACA,uBAAIP,KACJ,oCACA,uBAAIS,WAGR,UAACb,EAAD,YACE,yBACE,SAAC,KAAD,CAAMqB,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGJ,SAAC,EAAAI,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACE,SAAC,KAAD,QAIP,ECnBD,EAxBsB,WACpB,IAAQlC,GAAOmC,EAAAA,EAAAA,MAAPnC,GACR,GAAwCoC,EAAAA,EAAAA,UAAS,MAAjD,eAAO1B,EAAP,KAAqB2B,EAArB,KAiBA,IAfAC,EAAAA,EAAAA,YAAU,WAAM,wCAId,8GAE+BvC,EAAAA,EAAAA,IAAeC,GAF9C,OAEUU,EAFV,OAGI2B,EAAgB3B,GAHpB,gDAKI6B,QAAQC,IAAR,MALJ,0DAJc,sBACTxC,GADS,mCAYdyC,EACD,GAAE,CAACzC,IAECU,EAEL,OAAO,SAACD,EAAD,CAAWC,aAAcA,GACjC,C","sources":["ApiService/ApiService.js","components/MovieItem/MovieItem.styled.js","components/MovieItem/MovieItem.jsx","pages/MoviesDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'ab57a8d74b0df3fdba80a78e42f32d17';\n\n// Запрос популярных фильмов на главную страницу\nexport const fetchTrendingMovie = async page => {\n  const url = `${BASE_URL}trending/movie/week?api_key=${API_KEY}&page=${page}`;\n  const response = await axios.get(url);\n  return response.data;\n};\n\n// Запрос детальной информации по id\nexport const getFilmDetails = async id => {\n  const url = `${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`;\n  const response = await axios.get(url);\n  return response.data;\n};\n\n// Запрос информации о актерах по id\nexport const getFilmCast = async id => {\n  const url = `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`;\n  const response = await axios.get(url);\n  return response.data;\n};\n\n// Запрос описания по id\nexport const getFilmReviews = async id => {\n  const url = `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US`;\n  const response = await axios.get(url);\n  return response.data;\n};\n\n// Запрос описания по query\nexport const getFilmSearch = async (query, page) => {\n  const url = `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=${page}&language=en-US`;\n  const response = await axios.get(url);\n  return response.data;\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin-top: 10px;\n  display: flex;\n`;\n\nexport const Img = styled.img`\n  margin-right: 20px;\n`;\n\nexport const Box = styled.ul`\n  margin-top: 20px;\n  margin-bottom: 20px;\n  gap: 10px;\n  display: flex;\n`;\n","import { Link, Outlet, useLocation } from 'react-router-dom';\nimport { Container, Img, Box } from './MovieItem.styled';\nimport { Loader } from '../Loader/Loder'\nimport { Suspense } from 'react';\n\nexport const MovieItem = ({ movieDetails }) => {\n  const { poster_path, overview, title, release_date, vote_average, genres } =\n    movieDetails;\n  \n  const year = release_date.slice(0, 4);\n  const userScore = vote_average.toFixed(1) * 10;\n  const genresList = genres.map(genre => genre.name + ', ');\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movies';\n\n  return (\n    <main>\n      <Link to={backLinkHref}>Go Back</Link>\n      <Container>\n        <Img\n          src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n          alt=\"\"\n          width={300}\n        />\n        <div>\n          <h2>\n            {title} ({year})\n          </h2>\n          <p>User Score: {`${userScore}%`}</p>\n          <h3>Overwiew</h3>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <p>{genresList}</p>\n        </div>\n      </Container>\n      <Box>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </Box>\n      <Suspense fallback={<Loader/>}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport { getFilmDetails } from '../ApiService/ApiService';\nimport { useEffect, useState } from 'react';\nimport { MovieItem } from 'components/MovieItem/MovieItem';\n\nconst MoviesDetails = () => {\n  const { id } = useParams();\n  const [movieDetails, setMovieDetails] = useState(null);\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n    async function APIfetchMovieDetails() {\n      try {\n        const movieDetails = await getFilmDetails(id);\n        setMovieDetails(movieDetails);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    APIfetchMovieDetails();\n  }, [id]);\n\n  if (!movieDetails) return;\n\n  return <MovieItem movieDetails={movieDetails} />;\n};\n\nexport default MoviesDetails"],"names":["BASE_URL","API_KEY","fetchTrendingMovie","page","url","axios","response","data","getFilmDetails","id","getFilmCast","getFilmReviews","getFilmSearch","query","Container","styled","Img","Box","MovieItem","movieDetails","poster_path","overview","title","release_date","vote_average","genres","year","slice","userScore","toFixed","genresList","map","genre","name","backLinkHref","useLocation","state","from","to","src","alt","width","Suspense","fallback","useParams","useState","setMovieDetails","useEffect","console","log","APIfetchMovieDetails"],"sourceRoot":""}